/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.aulajavamysql;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class frmCadastroPessoa extends javax.swing.JFrame {

    /**
     * Creates new form frmCadastroPessoa
     */
    public frmCadastroPessoa() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtPesquisaId = new javax.swing.JTextField();
        txtNome = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        txtDataNascimento = new javax.swing.JTextField();
        txtSexo = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistros = new javax.swing.JTable();
        btnNovo = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Cadastro de pessoas");

        jLabel2.setText("id");

        jLabel4.setText("nome");

        jLabel5.setText("salario");

        jLabel6.setText("data nascimento");

        jLabel7.setText("sexo");

        txtSexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSexoActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        tblRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRegistros);

        btnNovo.setText("inserir");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnAtualizar.setText("atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setText("excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDataNascimento))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSalario))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNome))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPesquisaId)))
                                .addGap(18, 18, 18)
                                .addComponent(btnPesquisar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                    .addComponent(btnNovo))
                                .addGap(50, 50, 50)
                                .addComponent(btnAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExcluir)))))
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPesquisaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovo)
                    .addComponent(btnAtualizar)
                    .addComponent(btnExcluir))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtSexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSexoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSexoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        try {
            exibirRegistros();
        } catch (SQLException ex) {
            Logger.getLogger(frmCadastroPessoa.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowOpened

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
      try {
            // TODO add your handling code here:
            Connection conexao = conectarBanco();

            String sql = "INSERT INTO pessoa (nome, salario, datanascimento, sexo) VALUES (?, ?, ?, ?)";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            String nome = txtNome.getText();
            double salario = Double.parseDouble(txtSalario.getText());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date dataNascimento = new Date(sdf.parse(txtDataNascimento.getText()).getTime());
            String sexo = txtSexo.getText();

            pstmt.setString(1, nome);
            pstmt.setDouble(2, salario);
            pstmt.setDate(3, dataNascimento);
            pstmt.setString(4, sexo);

            pstmt.executeUpdate();

            pstmt.close();
            conexao.close();

            JOptionPane.showMessageDialog(this,"Dados salvos com sucesso!");
            exibirRegistros();


        } catch (SQLException ex) {
            Logger.getLogger(frmCadastroPessoa.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(frmCadastroPessoa.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        try {
            int id = Integer.parseInt(txtPesquisaId.getText());
            Connection conexao = conectarBanco();
            String sql = "Select * from pessoa where idPessoa = ?";
            
            PreparedStatement pstmt = conexao.prepareStatement(sql);
            pstmt.setInt(1,id); ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                txtNome.setText(rs.getString("nome"));
                txtSalario.setText(String.valueOf(rs.getDouble("salario")));

                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String dataNascimentoFormatted = dateFormat.format(rs.getDate("datanascimento"));
                txtDataNascimento.setText(dataNascimentoFormatted);

                txtSexo.setText(rs.getString("sexo"));

            } else {
                // Se não houver resultado, exibir uma mensagem
                JOptionPane.showMessageDialog(this, "Nenhum registro encontrado para o ID informado.");
            }

            rs.close();
            pstmt.close();
            conexao.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar registro: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
        try {

            // Cria um JPanel para conter a mensagem e os botões
            JPanel panel = new JPanel();

            // Adiciona uma mensagem ao JPanel
            JLabel label = new JLabel("Tem certeza que deseja excluir este registro?");
            panel.add(label);

            // Define os botões personalizados
            String[] options = {"Sim", "Não"};

            // Exibe a caixa de diálogo de confirmação com botões personalizados
            int confirmacao = JOptionPane.showOptionDialog(this, panel, "Confirmação de Exclusão", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);



            // Se o usuário confirmar a exclusão (clicar em "Sim")
            if (confirmacao == JOptionPane.YES_OPTION) {
                // Conectar ao banco de dados
                Connection conexao = conectarBanco();

                // Criar uma instrução SQL para excluir o registro da tabela Pessoa
                String sql = "DELETE FROM pessoa WHERE idPessoa = ?";

                // Preparar a instrução
                PreparedStatement pstmt = conexao.prepareStatement(sql);

                // Obter o ID do registro a ser excluído
                int id = Integer.parseInt(txtPesquisaId.getText());

                // Definir o valor do parâmetro da instrução SQL
                pstmt.setInt(1, id);

                // Executar a instrução SQL
                int linhasAfetadas = pstmt.executeUpdate();
                // Verificar se a exclusão foi bem-sucedida
                if (linhasAfetadas > 0) {
                    JOptionPane.showMessageDialog(this, "Registro excluído com sucesso!");

                    // Limpar os campos após a exclusão
                } else {
                    JOptionPane.showMessageDialog(this, "Nenhum registro foi excluído. Verifique o ID informado.");
                }

                // Fechar a conexão e liberar os recursos
                pstmt.close();
                conexao.close();
                exibirRegistros();
            }

        } catch (SQLException ex) {
            // Lidar com erros de banco de dados
            JOptionPane.showMessageDialog(this, "Erro ao excluir registro: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
try {
            // TODO add your handling code here:
            Connection conexao = conectarBanco();

            String sql = "UPDATE pessoa SET nome = ?, salario = ?, datanascimento = ?, sexo = ? WHERE idPessoa = ?";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            String nome = txtNome.getText();
            double salario = Double.parseDouble(txtSalario.getText());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            Date dataNascimento = new Date(sdf.parse(txtDataNascimento.getText()).getTime());
            String sexo = txtSexo.getText();
            int id = Integer.parseInt(txtPesquisaId.getText());

            pstmt.setString(1, nome);
            pstmt.setDouble(2, salario);
            pstmt.setDate(3, dataNascimento);
            pstmt.setString(4, sexo);
            pstmt.setInt(5, id);

            int linhasAfetadas = pstmt.executeUpdate();


            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum registro foi atualizado. Verifique o ID informado.");
            }

            pstmt.close();
            conexao.close();
            exibirRegistros();



        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar registro: " + ex.getMessage());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao trazer a data: " + ex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnAtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCadastroPessoa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCadastroPessoa().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRegistros;
    private javax.swing.JTextField txtDataNascimento;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisaId;
    private javax.swing.JTextField txtSalario;
    private javax.swing.JTextField txtSexo;
    // End of variables declaration//GEN-END:variables

    private void exibirRegistros() throws SQLException {

        try {
            Connection conexao = conectarBanco();

            String sql = "Select IdPessoa, Nome From Pessoa";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            ResultSet rs = pstmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tblRegistros.getModel();
            model.setRowCount(0);

            while (rs.next()) {

                int id = rs.getInt("idPessoa");
                String nome = rs.getString("nome");

                model.addRow(new Object[]{id, nome});

            }

            rs.close();
            pstmt.close();
        } catch (SQLException ex) {
            // Lidar com erros de banco de dados
            JOptionPane.showMessageDialog(this, "Erro ao buscar registros: " + ex.getMessage());
        }

    }

    private Connection conectarBanco() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/aulajava";
        String usuario = "inovintegracao";
        String senha = "inov&&100408@";
        return DriverManager.getConnection(url, usuario, senha);
    }
}
